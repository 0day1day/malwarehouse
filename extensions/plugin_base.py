from utils import utils
# Custom Exceptions
class PluginConfigError(Exception):
    pass
class MalwareHousePluginNotFound(Exception):
    def __init__(self, format):
        Exception.__init__(self, "Handler for transform format [" + format + "] not found.")

 
def get_plugin(name, config=None):
    print PluginBase.plugins
    plugin = utils.first(x for x in PluginBase.plugins if x.get_name() == name)
    if plugin == None:
        print format
        print PluginBase.plugins
        print "Not found"
        return None
    return plugin(config)

class MalwareHousePlugin(type):
    def __init__(cls,name,bases,attrs):
        #If the class has a plugins property
        # we have already called init on the base class
        print name
        if not hasattr(cls,'plugins'):
            cls.plugins = []
        else:
            cls.plugins.append(cls)
            #Do any plugin specific registration

class PluginBase(object):
    __metaclass__ = MalwareHousePlugin 
    def __init__(self,config):        
        # Call the derived class to parse the rest of the configuration parameters
        self.initialize_config(config)
        
            
    def initialize_config(self,config_dict):
        pass
        #raise NotImplementedError
    @staticmethod
    def get_name():
        raise NotImplementedError
    def analyze(self):
        pass
    def create_report(self):
        pass

