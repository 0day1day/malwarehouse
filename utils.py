import hashlib
import magic
import pydeep
import ConfigParser
import json
import os
import urllib2
import re
def get_configuration(config_file):
    config = ConfigParser.SafeConfigParser()
    try:
        config.read(config_file)
        return config
    except Exception, err:
        print "%s - %s" %(Exception, err)

def initialize_environment(config):
    # Create malwarehouse root directory     
    base_dir = os.path.expanduser(config.get('settings', 'basedir'))
    # Downloads directory
    downloads_dir = os.path.expanduser(config.get("settings","downloads"))
    try:
        if not os.path.exists(base_dir):
            os.makedirs(base_dir)
        if not os.path.exists(downloads_dir):
            os.makedirs(downloads_dir)
        return True
    except Exception, err:
        print err
        return False
    
def download_file(url, dir):
    try:
        u = urllib2.urlopen(url)
        
        if "Content-Disposition" in u.info():
            content_disposition =  u.info()["Content-Length"]
            matches = re.search(r'filename="(.+)"', content_disposition)
            filename = matches.group(1)
        else:
            filename = os.path.basename(url) 
        print filename
        local_filepath = os.path.join(dir, filename)
        f = open(local_filepath, 'w')
        f.write(u.read())
        f.close()
        return local_filepath
    except Exception, err:
        print err
        return None

def parse_sqlite_result(unparsed):
    "Takes the results from a SQLite query and parses it as a dictionary."
    return unparsed
    return {'datetime': unparsed[0], 'name': unparsed[1], 'mimetype': unparsed[2], 'tags': unparsed[3], 'size': unparsed[4], 'md5': unparsed[5], 'sha256': unparsed[6], 'source': unparsed[7], 'notes': unparsed[8]}

def get_json(dictionary):
    return json.dumps(dictionary
                      )
def get_mimetype(malware_path):
    """Finds the standard mimetype for file and returns type name."""
    mime = magic.Magic(mime=True)
    return mime.from_file(malware_path)

def __json__(self):
    print "JSON would have been returned."
    pass

def __str__(self):
    return self.summary()
def first(iterable, default=None):
    for item in iterable:
        return item
    return default
