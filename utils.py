import hashlib
import magic
import pydeep
import ConfigParser

def get_configuration(config_file):
    config = ConfigParser.SafeConfigParser()
    try:
        config.read(config_file)
        return config
    except Exception, err:
        print "%s - %s" %(Exception, err)

def get_md5(malware_path):
    """Wrapper for the usual md5 call because it's so verbose."""
    return hashlib.md5(file(malware_path, 'r').read()).hexdigest()

def get_sha256(malware_path):
    """Wrapper for the usual sha256 call because it's so verbose."""
    return hashlib.sha256(file(malware_path, 'r').read()).hexdigest()

def get_ssdeep(malware_path):
    """Wrapper for the usual pyssdeep call because it's so verbose."""
    return "Not yet implimented"

def get_mimetype(malware_path):
    """Finds the standard mimetype for file and returns type name."""
    mime = magic.Magic(mime=True)
    return mime.from_file(malware_path)

def parse_sqlite_result(unparsed):
    "Takes the results from a SQLite query and parses it as a dictionary."
    return {'datetime': unparsed[0], 'name': unparsed[1], 'mimetype': unparsed[2], 'tags': unparsed[3], 'size': unparsed[4], 'md5': unparsed[5], 'sha256': unparsed[6], 'source': unparsed[7], 'notes': unparsed[8]}


def get_yara(malware_path, yara_rules):
    """Checks malware against a Yara ruleset and returns a dictionary of matched rules."""
    tags = []
    try:
        import yara
        rules = yara.compile(filepath=yara_rules, includes=True)
        yara_tags = rules.match(malware_path)
        for tag in yara_tags:
            tags.append(str(tag))

    except ImportError:
        raise
    except yara.Error as e:
        print("Yara signature file doesn't exist.")
        tags = []
    return tags

# def tagger(self):
#     pass



def details(self):
    """Prints an easy to read summary of the malware."""

    details = " Analysis ".center(50, "=")
    details += "datetime:".ljust(25) + "%s\n" % (report_json['datetime'])

    details += " File ".center(50, "=")
    details += "sample name:".ljust(25) + "%s\n" % (report_json['name'])
    details += "mimetype:".ljust(25) + "%s\n" % (report_json['mimetype'])
    details += "size:".ljust(25) + "%s\n" % (report_json['size'])

    details += " Hashes ".center(50, "=")
    details += "md5:".ljust(26) + "%s\n" % (report_json['md5'])
    details += "sha256:".ljust(26) + "%s\n" % (report_json['sha256'])

    details += " Meta ".center(50, "=")
    details += "tags:".ljust(26) + "%s\n" % (report_json['tags'])
    details += "source:".ljust(26) + "%s\n" % (report_json['source'])

    details += " Meta ".center(50, "=")
    details += "notes:".ljust(25) + "%s" % (report_json["notes"])
    details += "\n"
    details += "sample directory: %s" % option_base_dir + report_json['sha256']

    return details

def __json__(self):
    print "JSON would have been returned."
    pass

def __str__(self):
    return self.summary()
