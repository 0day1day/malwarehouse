import utils
import os, pwd, shutil
import datetime

class MalwareSample(object):
    """malware_sample represents a piece of malware within Malwarehouse"""

    def __init__(self, malware_path, config, sample_source="", sample_notes="", yara_rules=None):
        super(MalwareSample, self).__init__()

        # File characteristics
        self.file_name = malware_path.split('/')[-1]
        self.file_mimetype = utils.get_mimetype(malware_path)
        self.file_size = 0
     
        # Hash characteristics
        self.hash_md5    = utils.get_md5(malware_path)
        self.hash_sha256 = utils.get_sha256(malware_path)

        if config.get('analysis', 'ssdeep'):
            self.hash_ssdeep = utils.get_ssdeep(malware_path)
        if not yara_rules:
            yara_rules = config.get('settings','yararules')
        # Meta characteristics
       
        self.meta_tags = utils.get_yara(malware_path, yara_rules)
        #self.meta_virustotal = [] # Impliment later
        self.meta_source = sample_source
        self.meta_notes  = sample_notes
      
       
        # Create analysis directory     
        dirs = ["bin", "report"]
        base_dir = os.path.expanduser(config.get('settings', 'basedir'))
        sample_dir = os.path.join(base_dir, self.hash_sha256)
        
        if not os.path.exists(sample_dir):
            os.makedirs(sample_dir)
            for dir in dirs:
                os.makedirs(os.path.join(sample_dir, dir))
        # Make a copy of the file
        shutil.copy(malware_path, os.path.join(sample_dir,"bin"))
        
        # Analysis characteristics
        self.analysis_datetime          = str(datetime.datetime.now())
        self.analysis_user              = pwd.getpwuid(os.getuid())[0]
        self.analysis_sample_directory  = sample_dir
        self.analysis_sample_location   = os.path.join(sample_dir, "bin", self.file_name)
        self.analysis_summary_location  = os.path.join(sample_dir, "report")
        
    @staticmethod
    def summary(malware_definition):
        return "- %s (%s) - %s" % (malware_definition['name'], malware_definition['source'], malware_definition['md5'])
    
    def basic_analyzer(self):    
        malware_definition = {
            "datetime": "", #calculated
            "name": "", #autodetected
            "tags": "",
            "size": "", #calculated
            "md5": "", #calculated
            "sha256": "", #calculated
            "mimetype": "", #calculated
            "source": "",
            "notes": "",
            "sample_dir" : ""
        }
        
        #Parsing Custom Options
        malware_definition["source"] = self.meta_source
        malware_definition["tags"]   = self.meta_tags
        malware_definition["notes"]  = self.meta_notes
        
        #Parsing Automatically Generated Options
        malware_definition["name"]      = self.analysis_sample_location.split('/')[-1]
        malware_definition["datetime"]  = str(datetime.datetime.now())
        malware_definition["size"]      = os.stat(self.analysis_sample_location).st_size
        malware_definition["md5"]       = utils.get_md5(self.analysis_sample_location)
        malware_definition["sha256"]    = utils.get_sha256(self.analysis_sample_location)
        malware_definition["mimetype"]  = utils.get_mimetype(self.analysis_sample_location)
        
        return malware_definition
    
    def create_report(self, malware_report):
        try:
            with open(os.path.join(self.analysis_summary_location, 'summary.txt'), 'w') as text_file:
                text_file.write(utils.details(malware_report))
                print "Report successfully created" 
                print "Report Location: %s" %os.path.join(self.analysis_summary_location, 'summary.txt')
        except Exception, err:
            print "Error: %s" %err