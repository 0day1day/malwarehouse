#!/usr/bin/env python
# encoding: utf-8
"""
malwarehouse.py

Created by Scott Roberts.
Copyright (c) 2012 TogaFoamParty Studios. All rights reserved.
"""

import datetime
import couchdb
import os
import hashlib
from optparse import OptionParser

def get_md5(malware_path):
    return hashlib.md5(file(malware_path, 'r').read()).hexdigest()

def get_sha256(malware_path):
    return hashlib.sha256(file(malware_path, 'r').read()).hexdigest()

def load_summary(report_json, filepath):
    server = couchdb.Server()

    try:
        db = server['malwarehouse_db']
    except:
        print " * Creating DB: malwarehouse_db" 
        db = server.create('malwarehouse_db')

    print " * Loading JSON and file: filepath" 
    doc_id, doc_rev = db.save(report_json)
    db.put_attachment(doc_id, file(filepath, 'r'))
    print " * Load successful." 

    return (doc_id, doc_rev)

def main():
    malware_definition = {
        "datetime": "", #calculated
        "name": "", #autodetected
        "family": "",
        "size": "", #calculated
        "md5": "", #calculated
        "sha256": "", #calculated
        "source": "",
        "notes": "",
    }

    parser = OptionParser(usage="usage: %prog [options] filepath", version="%prog 0.1")
    parser.add_option("-s", "--source",
                      action="store",
                      type="string",
                      dest="SOURCE",
                      default=None,
                      help="Original source of file")
    parser.add_option("-t", "--tags",
                      action="store",
                      type="string",
                      dest="TAGS",
                      default="No tags",
                      help="Any characteristics of the malware")
    parser.add_option("-N", "--notes",
                      action="store",
                      type="string",
                      dest="NOTES",
                      default="",
                      help="Notes about file")
        
    (options, args) = parser.parse_args()

    #Parse malware file path and name
    malware_path = args[0]
    malware_filename = malware_path.split('/')[-1]

    #Uncomment to enforce at least one final argument
    if len(args) != 1:
        parser.error("You didn't specify a malware target path.")
        return False

    #Parsing Custom Options    
    if options.SOURCE: malware_definition["source"] = options.SOURCE
    if options.TAGS: malware_definition["tags"] = options.TAGS
    if options.NOTES: malware_definition["notes"] = options.NOTES

    #Parsing Automatically Generated Options
    malware_definition["name"] = malware_filename
    malware_definition["datetime"] = str(datetime.datetime.now())
    malware_definition["size"] = os.stat(malware_path).st_size
    malware_definition["md5"] = get_md5(malware_path)
    malware_definition["sha256"] = get_sha256(malware_path) 

    print "Analysis complete. Loading."
    load_summary(malware_definition, malware_path)
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "User aborted."
    except SystemExit:
        pass
    except:
        SystemExit

