#!/usr/bin/env python
# encoding: utf-8
"""
malwarehouse.py

Created by Scott Roberts.
Copyright (c) 2012 TogaFoamParty Studios. All rights reserved.
"""

import datetime
import os
import pwd
import shutil
import re
import magic
import pydeep
import utils
import db_helper
import sys
import malware_sample
from argparse import ArgumentParser



# Malwarehouse Options
config = utils.get_configuration("malwarehouse.cfg")
# Initialize our DB controller
db_controller = db_helper.MalwareDbController(config)
if config.get('analysis', 'yara') == 'On':
    import yara
    option_yara_rulefile = config.get('settings', 'yararules')
if config.get('analysis', 'magic') == 'On':
    import magic
if config.get('analysis', 'ssdeep') == 'On':
    import pydeep
   
def check_prelim():
    """Initial setup code. Eventually this will set options."""
    return db_controller.initialize_db()

def create_db():
    pass

# create, read, update, delete
def create_sample_db(sample_path):
  """Load information about the sample into the index DB."""

  #conn = sqlite3.connect(option_base_dir + "malwarehouse.db")
  #c = conn.cursor()

  # Insert a row of data
  #c.execute("INSERT INTO malwarehouse_index VALUES (\"%s\", \"%s\", \"%s\", \"%s\", \"%d\", \"%s\", \"%s\", \"%s\", \"%s\")" % (report_json['datetime'], report_json['name'], report_json['mimetype'], report_json['tags'], report_json['size'], report_json['md5'], report_json['sha256'], report_json['source'], report_json['notes']))

  # Save (commit) the changes
  #conn.commit()

  # We can also close the cursor if we are done with it
  #c.close()

  #print "Sample %s loaded..." % report_json['name']

  #return True
  pass

"""def create_sample_filesystem():
  Creates a directory to store the malware and summary.
  print "Loading Malware %s" % malware_path

  sample_dir = "%s%s" % (option_base_dir, report_json['sha256'])

  if not os.path.exists(sample_dir):
    print "Creating %s" % (sample_dir)
    os.makedirs(sample_dir)

  # Sets up whether or not the file gets moved after being imported
  if config.get('settings', 'delete') == 'On':
    shutil.move(malware_path, sample_dir)
  else:
    shutil.copyfile(malware_path, sample_dir)

  with open(sample_dir + '/summary.txt', 'w') as text_file:
    text_file.write(details(report_json))

  return True
"""

def read_sample_db():
    pass

def read_sample_filesystem():
    pass

def update_sample_db():
    pass

def update_sample_filesystem():
    pass

def delete_sample_db():
    pass

def delete_sample_filesystem():
    pass

def malware_loader(malware_path):
    print "malware_loader called"
    sample = malware_sample.MalwareSample(malware_path, config)
    print sample.summary()

  #load_db(report_json)
  #load_directory(malware_path)




def run():
    if not check_prelim():
        print "[ERROR] Initial setup unable to complete. Exiting..."
        return False

    try:
        with open(malware_path) as f: pass
    except IOError as e:
        parser.error("You specified an invalid malware target path.")
        return False

    malware_definition = {
        "datetime": "", #calculated
        "name": "", #autodetected
        "tags": "",
        "size": "", #calculated
        "md5": "", #calculated
        "sha256": "", #calculated
        "mimetype": "", #calculated
        "source": "",
        "notes": "",
    }

    #Parsing Custom Options
    malware_definition["source"] = source
    malware_definition["tags"] = tags
    malware_definition["notes"] = notes

    #Parsing Automatically Generated Options
    malware_definition["name"] = malware_path.split('/')[-1]
    malware_definition["datetime"] = str(datetime.datetime.now())
    malware_definition["size"] = os.stat(malware_path).st_size
    malware_definition["md5"] = get_md5(malware_path)
    malware_definition["sha256"] = get_sha256(malware_path)
    malware_definition["mimetype"] = get_mime_type(malware_path)

    return malware_definition


'''
# Setup Logging
import logging
logger = logging.getLogger('default')
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# Setup logging to file
fh = logging.FileHandler('default.log')
fh.setLevel(logging.DEBUG)
logger.addHandler(fh)
# Setup logging to console
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
logger.addHandler(ch)
# Setup logging to syslog
import logging.handlers
sh = logging.handlers.SysLogHandler()
sh.setLevel(logging.DEBUG)
logger.addHandler(sh)

# 'application' code
logger.debug('debug message')
logger.info('info message')
logger.warn('warn message')
logger.error('error message')
logger.critical('critical message')
'''

'''
# Setup Text Colors
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

print bcolors.OKBLUE + "Test Message" + bcolors.ENDC
'''

def foo():
    return "foo function called"

def bar():
    return "bar function called"

def main():
    check_prelim()

    parser = ArgumentParser()
  
    parser.add_argument("-r", "--recent",
                        action="store",
                        nargs='?',
                        default='5',
                        help="Display the newest samples (default: 5)")
    parser.add_argument("-a", "--add",
                        action="store",
                        default="",
                        help="Find a sample by name, md5, or sha256")
    
    
    parser.add_argument("-s", "--source",
                        action="store",
                        default=None,
                        help="Source of file")
    parser.add_argument("-t", "--tags",
                        action="store",
                        default=None,
                        help="Any characteristics of the malware")
    parser.add_argument("-n", "--notes",
                        action="store",
                        default="",
                        help="Notes about file")
    parser.add_argument("-f", "--find",
                        action="store",
                        default="",
                        help="Find a sample by name, md5, or sha256")

    # parser.add_option("--retag",
    #                     action="store",
    #                     type="string",
    #                     dest="FIND",
    #                     default="",
    #                     help="Find a sample by name, md5, or sha256")
    parser.add_argument("-d", "--delete",
                        action="store",
                        default="",
                        help="Delete a sample by name, md5, or sha256")

    args = parser.parse_args()
    print "Args: %s" % args
    cli_arguments = sys.argv
    
    
    if args.add:      
        print "> Add called with %s." % (args.add)
        #add checks that file exists
        malware_loader(args.add)
        return True
    
    if args.find:
        print "> Find called with %s." % (args.find)
        print db_controller.find_sample(args.find)

    if "-r" in cli_arguments:
        if not args.recent:
            args.recent = 5
        print "> Recent called with %s" % (args.recent)
        print db_controller.recent()
        
    
    if args.delete:
        print "> Delete called with %s" % (args.delete)

    malware_loader("/Users/warebot/calc.exe")
    return True
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "User aborted."
    except SystemExit:
        pass
    except:
        #systemexit
        pass
